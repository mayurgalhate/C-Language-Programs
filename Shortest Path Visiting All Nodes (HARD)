#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int allVisited = (1 << n) - 1;

        queue<pair<int, int>> q; // {node, mask}
        vector<vector<bool>> visited(n, vector<bool>(1 << n, false));

        // Start BFS from every node
        for (int i = 0; i < n; i++) {
            q.push({i, 1 << i});
            visited[i][1 << i] = true;
        }

        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                auto [node, mask] = q.front();
                q.pop();

                // If all nodes are visited
                if (mask == allVisited)
                    return steps;

                // Traverse all neighbors
                for (int nei : graph[node]) {
                    int nextMask = mask | (1 << nei);
                    if (!visited[nei][nextMask]) {
                        visited[nei][nextMask] = true;
                        q.push({nei, nextMask});
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};

// Example usage
int main() {
    Solution sol;
    vector<vector<int>> graph = {{1,2,3},{0},{0},{0}};
    cout << "Shortest Path Visiting All Nodes: "
         << sol.shortestPathLength(graph) << endl;
    return 0;
}
