#include <bits/stdc++.h>
using namespace std;

// Trie Node Structure
class TrieNode {
public:
    bool isEnd;
    TrieNode* children[26];

    TrieNode() {
        isEnd = false;
        for (int i = 0; i < 26; i++)
            children[i] = nullptr;
    }
};

// Trie Implementation
class Trie {
private:
    TrieNode* root;

public:
    Trie() { root = new TrieNode(); }

    // Insert a word into the trie
    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int idx = c - 'a';
            if (!node->children[idx])
                node->children[idx] = new TrieNode();
            node = node->children[idx];
        }
        node->isEnd = true;
    }

    // Search a word in the trie
    bool search(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int idx = c - 'a';
            if (!node->children[idx])
                return false;
            node = node->children[idx];
        }
        return node->isEnd;
    }

    // Check if any word starts with given prefix
    bool startsWith(string prefix) {
        TrieNode* node = root;
        for (char c : prefix) {
            int idx = c - 'a';
            if (!node->children[idx])
                return false;
            node = node->children[idx];
        }
        return true;
    }
};

// Example usage
int main() {
    Trie trie;
    trie.insert("mayur");
    trie.insert("man");
    trie.insert("mad");

    cout << boolalpha;
    cout << "Search 'mayur': " << trie.search("mayur") << endl;
    cout << "Search 'max': " << trie.search("max") << endl;
    cout << "Starts with 'ma': " << trie.startsWith("ma") << endl;

    return 0;
}
